// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language.
 *
 * In particular, the CPU functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM).
 *
 * The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step.
 * If reset==1 then the CPU jumps to address 0 (i.e. pc is set to 0 in next
 * time step) rather than to the address resulting from executing the current
 * instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // Implement c-instruction architecture
        // If instruction[15]==0 then it's an a-instruction and all control
        // bits are set to zero
        And(a=instruction[15], b=instruction[12], out=a);
        And(a=instruction[15], b=instruction[11], out=c1);
        And(a=instruction[15], b=instruction[10], out=c2);
        And(a=instruction[15], b=instruction[9], out=c3);
        And(a=instruction[15], b=instruction[8], out=c4);
        And(a=instruction[15], b=instruction[7], out=c5);
        And(a=instruction[15], b=instruction[6], out=c6);
        And(a=instruction[15], b=instruction[5], out=d1);
        And(a=instruction[15], b=instruction[4], out=d2);
        And(a=instruction[15], b=instruction[3], out=writeM);
        And(a=instruction[15], b=instruction[2], out=j1);
        And(a=instruction[15], b=instruction[1], out=j2);
        And(a=instruction[15], b=instruction[0], out=j3);


        // Implement ARegister and a-instruction architecture
        Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=ARegisterIn);
        Not(in=instruction[15], out=Not15);
        Or(a=Not15, b=d1, out=ARegisterLoad);
        ARegister(in=ARegisterIn, load=ARegisterLoad,
                  out=ARegisterOut, out[0..14]=addressM);


        // Implement DRegister architecture
        DRegister(in=ALUOut, load=d2, out=DRegisterOut);


        // Implement ARegister or inM Mux architecture
        Mux16(a=ARegisterOut, b=inM, sel=a, out=AorM);


        // Implement ALU architecture
        ALU(x=DRegisterOut, y=AorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
            out=ALUOut, out=outM, zr=ZR, ng=NG);


        // Implement Jump architecture
        // Step 1: Create combinations of ALU outputs ZR and NG
        Not(in=ZR, out=NotZR);
        Not(in=NG, out=NotNG);
        And(a=NotZR, b=NotNG, out=NotZRNotNG);
        And(a=NotZR, b=NG, out=NotZRNG);
        Or(a=ZR, b=NG, out=ZRorNG);

        // Step 2: Implement jump bits architecture
        DMux8Way(in=true, sel[2]=j1, sel[1]=j2, sel[0]=j3,
                 a=NULL, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);

        // Step 3: Check if any of the jump conditions is true
        And(a=NotZRNotNG, b=JGT, out=JGTout);
        And(a=ZR, b=JEQ, out=JEQout);
        And(a=NotNG, b=JGE, out=JGEout);
        And(a=NotZRNG, b=JLT, out=JLTout);
        And(a=NotZR, b=JNE, out=JNEout);
        And(a=ZRorNG, b=JLE, out=JLEout);
        Or8Way(in[0]=false, in[1]=JGTout, in[2]=JEQout, in[3]=JGEout,
               in[4]=JLTout, in[5]=JNEout, in[6]=JLEout, in[7]=JMP,
               out=JUMP);


        // Implement Program Counter architecture
        PC(in=ARegisterOut, load=JUMP, inc=true, reset=reset, out[0..14]=pc);
}
